1. What is the collection framwork, why need collections.

    The Collection Framework in Java is a set of classes and interfaces
    that help you store, retrieve, and manage groups of data
    (like lists of names, sets of numbers, etc.) easily and efficiently.

    Imagine you have 1000 student names to store. You can’t create 1000 variables.
     That’s where collections help:

            They let you store multiple values in a single object.

            You can add, remove, sort, search data easily.

            They provide ready-made methods to avoid writing complex code.


2. What are the main ways to iterate through a collection? Provide an example for each method.

    using "for each " loop
    -------------------------
    import java.util.ArrayList;

        public class Main {
            public static void main(String[] args) {
                ArrayList<String> names = new ArrayList<>();
                names.add("Alice");
                names.add("Bob");
                names.add("Charlie");

                for (String name : names) {
                    System.out.println(name);
                }
            }
        }

    using iterator
    ------------------------------
    import java.util.ArrayList;
    import java.util.Iterator;

    public class Main {
        public static void main(String[] args) {
            ArrayList<String> names = new ArrayList<>();
            names.add("Alice");
            names.add("Bob");
            names.add("Charlie");

            Iterator<String> it = names.iterator();
            while (it.hasNext()) {
                String name = it.next();
                System.out.println(name);
            }
        }
    }

    using Traditionla for loop
    -------------------------------
    import java.util.ArrayList;
        public class Main {
            public static void main(String[] args) {
                ArrayList<String> names = new ArrayList<>();
                names.add("Alice");
                names.add("Bob");
                names.add("Charlie");

                for (int i = 0; i < names.size(); i++) {
                    System.out.println(names.get(i));
                }
            }
        }

    using forEach() method with lamdha
    ------------------------------------
    import java.util.ArrayList;
    public class Main {
        public static void main(String[] args) {
            ArrayList<String> names = new ArrayList<>();
            names.add("Alice");
            names.add("Bob");
            names.add("Charlie");

            names.forEach(name -> System.out.println(name));
        }
    }




3. What is the issue with the following loop when used with a non-empty collection?
    while (collection.iterator().hasNext()) {
        // No call to next()
    }

if you call .Iterator agian and again inside a loop
 you are always staring from the begging of the collection


4. Draw or describe the hierarchy of the Java Collection Framework.

5. What are the basic set operations supported in Java?

| Operation    | Method          | Description                                |
| ------------ | --------------- | ------------------------------------------ |
| Union        | `addAll()`      | Combines all elements                      |
| Intersection | `retainAll()`   | Keeps only common elements                 |
| Difference   | `removeAll()`   | Removes common elements from the first set |
| Subset check | `containsAll()` | Checks if one set is a subset of another   |


6. What is the difference between HashSet and TreeSet?

| Feature                       | **HashSet**                                           | **TreeSet**                                                           |
| ----------------------------- | ----------------------------------------------------- | --------------------------------------------------------------------- |
| **Ordering**                  | No order (elements are unordered)                     | Sorted in **natural order** (or by custom `Comparator`)               |
| **Performance**               | Faster (constant time `O(1)` for add, remove, search) | Slower (logarithmic time `O(log n)` due to internal tree structure)   |
| **Underlying Data Structure** | Uses a **Hash Table**                                 | Uses a **Red-Black Tree** (self-balancing BST)                        |
| **Allows null?**              | Allows **one null element**                           | **Does NOT** allow null (throws `NullPointerException` if you add it) |
| **Use Case**                  | When you **just need uniqueness**, no sorting         | When you **need elements sorted** automatically                       |
                                  Best when you just need to check for                    
                                   uniqueness quickly.
                                                                                          Best when you need a sorted set.



7. What is hashing? Provide a small example to demonstrate how it works.
   
    Hashing is a technique used to convert data (like a string or number) into a fixed-size 
    value called a hash code using a hash function.
    to quickly locate or store elements.

    ----------------------------------
    import java.util.HashMap;
    public class Main {
        public static void main(String[] args) {
            HashMap<String, Integer> map = new HashMap<>();

            // Storing data (Key is hashed internally)
            map.put("Alice", 90);
            map.put("Bob", 85);

            // Retrieving data
            System.out.println("Alice's score: " + map.get("Alice"));
        }
    }

    "Alice" is converted to a hash code using its hashCode() method.

    The hash code determines the index (bucket) where the value 90 is stored.

    When map.get("Alice") is called, it recalculates the hash and finds the value quickly.

    --------------------


8. How does a HashSet store its elements internally?

    A HashSet uses a HashMap internally to store its elements.
    -------------------------------------------------------------
    When you add an element to a HashSet,
    it calls the hashCode() method of the object to calculate a hash.

    The hash determines the "bucket" 
    (location in memory) where the element should go.

    It then uses equals() to check if any existing element
    in that bucket is equal to the new one (to avoid duplicates).

    Internally, each element is stored as a key in a HashMap, 
    and the value is a constant placeholder (PRESENT).

    | Step               | Description                                                     |
| ------------------ | --------------------------------------------------------------- |
| 1. Hashing         | Calls `hashCode()` to compute hash                              |
| 2. Bucketing       | Determines where to place the element                           |
| 3. Duplicate check | Uses `equals()` to avoid storing duplicates                     |
| 4. Storage         | Stores element as **key** in a `HashMap`, value is dummy object |



9. How efficient is HashSet in the following operations? Use Big O notation:
    Removing an element
    Searching for an element

    | Operation           | Average Case | Worst Case |
| ------------------- | ------------ | ---------- |
| `remove(element)`   | O(1)         | O(n)       |
| `contains(element)` | O(1)         | O(n)       |


10. What are hash collisions, and how are they handled?

A hash collision happens when two different objects produce the same hash code.

In Java, objects are placed into bucketsbased on their hash code.
 If two objects generate the same hash, they end up in the same bucket, causing a collision.

Java handles hash collisions using chaining.
 When two elements have the same hash code, 
 they are placed in the same bucket as a list. 
 Java then uses the equals() method to check if the elements are equal.
  If there are many collisions, Java converts the list to a tree to keep performance fast.

  If both elements are the same (same hashCode() and equals() returns true),
   Java does not store duplicates in a HashSet. It checks using equals() and skips adding the duplicate element.
   if both elements are not same, both are stored separately in the same bucket.



11. What does the capacity of a HashSet mean?
12. What is the meaning of load factor in a HashSet?
13. How do you create a HashSet? Provide examples for the following:
    A HashSet of integers
    A HashSet of strings
    A HashSet of a custom class called Student
14. What are the differences between TreeSet and HashSet?
15. Which is faster: HashSet or TreeSet? In what situations?
16. If a TreeSet contains n elements, what is the average time complexity for inserting an element?
17. How do you implement the Comparable interface in Java?
        What is the abstract method it includes?
        What are the return and input types of that method?
18. How do you use a TreeSet with elements that implement the Comparable interface?
19. How do you create the following TreeSet instances:
    A TreeSet of integers
    A TreeSet of strings
    A TreeSet of Student objects, ordered by student name
20. Given a list of student names and their scores, how would you:
18. Store the data in a suitable collection
19. Display the list in descending order of scores
20. Which collection type would be most appropriate for this?
21. You need to store a large number of unique product IDs and perform fast insertions and lookups. You do not require any sorting. Which Set implementation would you choose?
22. You are building a student record system where the student names must be stored in sorted order (alphabetically) without duplicates. Which Set type should you use?
23. A game application needs to keep track of items collected by the player. The order doesn’t matter, but duplicates are not allowed. What is the most efficient Set type?
24. You want to maintain a list of cities for a travel recommendation feature, where cities should be displayed in alphabetical order. Which Set would best serve this need?
25. In a voting system, you want to store the unique names of voters as they register. The priority is speed for checking if someone has already registered. Which Set type is appropriate?
26. You’re creating a leaderboard where player names need to be shown in alphabetical order, and no duplicates are allowed. Which Set implementation should be used?

